#ifndef MYMAP_H
#define MYMAP_H
#include <set>	

template <typename Key, typename T>
class ppair
{
	public:
	const Key first;
	mutable T second;
	
	ppair(Key s, T t)
	:first(s), second(t)
	{}
};

template< typename Key, typename T>
struct classcomp
{
	typedef ppair<const Key, T> Pair;
	bool operator() (const Pair& lhs, const Pair& rhs) const
	{
		return lhs.first < rhs.first;
	}
};

template < typename Key, typename T >
class map : public std::set< ppair<const Key, T>,classcomp<const Key,T> > 
{
	public:
	typedef ppair<const Key, T> Pair;
	typedef std::set<Pair, classcomp<const Key, T> > Stuff;
	std::set<Pair, Stuff > my_set;//Set to hold data
	
	map()
	{
		this->my_set();
	}
	
	map(const map& map2)
	{
		map() = map2;
	}

	map& operator=(const map& map2)
	{
		map() = map2;
	}
	
	typename Stuff::iterator find(const Key& x) const
	{
		return Stuff::find(Pair(x,T()));
	}
	
	typename Stuff::iterator insert(Pair p)
	{
		typename Stuff::iterator i;
		if(count(p) == 0)
		{
			i = Stuff::insert(p);
		}
		else
		{
			i = find(p);
			i->second = p->second;
		}
	}
	
	
	
	
};






#endif
